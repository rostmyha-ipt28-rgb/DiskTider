# intro.py
import tkinter as tk
from tkinter import ttk
from gui_app import DiskTiderGUI, THEMES, ModernButton
import math


class AnimatedButton(tk.Button):
    """–ö–Ω–æ–ø–∫–∞ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏"""

    def __init__(self, master, **kwargs):
        self.original_bg = kwargs.get('bg', '#007ACC')
        super().__init__(
            master,
            relief=tk.FLAT,
            borderwidth=0,
            cursor='hand2',
            font=('Segoe UI', 12, 'bold'),
            **kwargs
        )
        self.bind('<Enter>', self._on_enter)
        self.bind('<Leave>', self._on_leave)
        self._hover_animation_id = None

    def _on_enter(self, e):
        if self['state'] != 'disabled':
            self['bg'] = self._lighten_color(self.original_bg, 0.15)

    def _on_leave(self, e):
        if self['state'] != 'disabled':
            self['bg'] = self.original_bg

    def _lighten_color(self, hex_color, factor):
        """–û—Å–≤–µ—Ç–ª—è–µ—Ç —Ü–≤–µ—Ç"""
        r, g, b = int(hex_color[1:3], 16), int(hex_color[3:5], 16), int(hex_color[5:7], 16)
        r = min(255, int(r + (255 - r) * factor))
        g = min(255, int(g + (255 - g) * factor))
        b = min(255, int(b + (255 - b) * factor))
        return f'#{r:02x}{g:02x}{b:02x}'


class FeatureCard(tk.Frame):
    """–ö–∞—Ä—Ç–æ—á–∫–∞ —Ñ–∏—á–∏ —Å —ç—Ñ—Ñ–µ–∫—Ç–æ–º –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ (–ë–ï–ó –∫—É—Ä—Å–æ—Ä–∞ –∫–Ω–æ–ø–∫–∏)"""

    def __init__(self, master, icon, title, description, theme, **kwargs):
        super().__init__(
            master,
            bg=theme['surface'],
            relief=tk.FLAT,
            **kwargs
        )
        self.theme = theme
        self.original_bg = theme['surface']
        self.hover_bg = self._lighten_color(theme['surface'], 0.1)

        # –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π padding
        content_frame = tk.Frame(self, bg=theme['surface'])
        content_frame.pack(fill='both', expand=True, padx=20, pady=15)

        # –ò–∫–æ–Ω–∫–∞
        icon_label = tk.Label(
            content_frame,
            text=icon,
            font=('Segoe UI', 32),
            bg=theme['surface'],
            fg=theme['primary'],
            cursor='arrow'
        )
        icon_label.pack(side='left', padx=(0, 15))

        # –¢–µ–∫—Å—Ç
        text_frame = tk.Frame(content_frame, bg=theme['surface'])
        text_frame.pack(side='left', fill='both', expand=True)

        title_label = tk.Label(
            text_frame,
            text=title,
            font=('Segoe UI', 12, 'bold'),
            bg=theme['surface'],
            fg=theme['fg'],
            anchor='w',
            cursor='arrow'
        )
        title_label.pack(fill='x', pady=(0, 3))

        desc_label = tk.Label(
            text_frame,
            text=description,
            font=('Segoe UI', 10),
            bg=theme['surface'],
            fg=theme['text_secondary'],
            anchor='w',
            wraplength=300,
            justify='left',
            cursor='arrow'
        )
        desc_label.pack(fill='x')

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—ã—á–Ω—ã–π –∫—É—Ä—Å–æ—Ä –¥–ª—è —Å–∞–º–æ–≥–æ —Ñ—Ä–µ–π–º–∞
        self.configure(cursor='arrow')

        # Bind —Å–æ–±—ã—Ç–∏—è –¥–ª—è hover —ç—Ñ—Ñ–µ–∫—Ç–∞
        self.bind('<Enter>', self._on_enter)
        self.bind('<Leave>', self._on_leave)
        for widget in self.winfo_children():
            self._bind_recursive(widget)

    def _bind_recursive(self, widget):
        """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –∫ –¥–æ—á–µ—Ä–Ω–∏–º –≤–∏–¥–∂–µ—Ç–∞–º"""
        widget.bind('<Enter>', self._on_enter)
        widget.bind('<Leave>', self._on_leave)
        try:
            widget.configure(cursor='arrow')
        except:
            pass
        for child in widget.winfo_children():
            self._bind_recursive(child)

    def _on_enter(self, e):
        self._update_colors(self.hover_bg)

    def _on_leave(self, e):
        self._update_colors(self.original_bg)

    def _update_colors(self, bg):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ü–≤–µ—Ç —Ñ–æ–Ω–∞ –¥–ª—è –≤—Å–µ—Ö –≤–∏–¥–∂–µ—Ç–æ–≤ –≤ –∫–∞—Ä—Ç–æ—á–∫–µ"""
        self.configure(bg=bg)
        for widget in self.winfo_children():
            self._update_widget_bg(widget, bg)

    def _update_widget_bg(self, widget, bg):
        """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ñ–æ–Ω –≤–∏–¥–∂–µ—Ç–æ–≤"""
        try:
            widget.configure(bg=bg)
        except:
            pass
        for child in widget.winfo_children():
            self._update_widget_bg(child, bg)

    def _lighten_color(self, hex_color, factor):
        """–û—Å–≤–µ—Ç–ª—è–µ—Ç —Ü–≤–µ—Ç –¥–ª—è dark —Ç–µ–º—ã"""
        r, g, b = int(hex_color[1:3], 16), int(hex_color[3:5], 16), int(hex_color[5:7], 16)
        r = min(255, int(r + (255 - r) * factor))
        g = min(255, int(g + (255 - g) * factor))
        b = min(255, int(b + (255 - b) * factor))
        return f'#{r:02x}{g:02x}{b:02x}'


class IntroScreen(tk.Frame):
    def __init__(self, master):
        super().__init__(master, bg=THEMES['dark']['bg'])
        self.master = master
        self.theme = THEMES['dark']
        self.alpha = 0.0

        self.pack(expand=True, fill="both")
        self._create_widgets()
        self._fade_in()

        self.master.bind('<Configure>', self._on_window_resize)

    def _on_window_resize(self, event):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞ –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è"""
        # –û–±–Ω–æ–≤–ª—è–µ–º —à–∏—Ä–∏–Ω—É –æ–∫–Ω–∞ –¥–ª—è canvas
        if hasattr(self, 'canvas') and hasattr(self, 'scrollable_frame'):
            self.canvas.itemconfig(self.canvas_window, width=self.canvas.winfo_width())

    def _create_widgets(self):
        """–°–æ–∑–¥–∞–µ—Ç –≤—Å–µ –≤–∏–¥–∂–µ—Ç—ã –∏–Ω—Ç—Ä–æ —ç–∫—Ä–∞–Ω–∞"""
        # Canvas —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
        self.canvas = tk.Canvas(self, bg=self.theme['bg'], highlightthickness=0)
        scrollbar = tk.Scrollbar(self, orient="vertical", command=self.canvas.yview)

        self.scrollable_frame = tk.Frame(self.canvas, bg=self.theme['bg'])

        self.scrollable_frame.bind(
            "<Configure>",
            lambda e: self.canvas.configure(scrollregion=self.canvas.bbox("all"))
        )

        # –ö–õ–Æ–ß–ï–í–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: —Å–æ–∑–¥–∞—ë–º –æ–∫–Ω–æ —Å anchor="center" –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º ID
        self.canvas_window = self.canvas.create_window(
            (0, 0),
            window=self.scrollable_frame,
            anchor="n"
        )

        self.canvas.configure(yscrollcommand=scrollbar.set)

        # –£–ø–∞–∫–æ–≤—ã–≤–∞–µ–º
        self.canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")

        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —à–∏—Ä–∏–Ω—ã –æ–∫–Ω–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ canvas
        self.canvas.bind('<Configure>', self._on_canvas_configure)

        # –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä - –¶–ï–ù–¢–†–ò–†–£–ï–ú –µ–≥–æ
        main_container = tk.Frame(self.scrollable_frame, bg=self.theme['bg'])
        main_container.pack(expand=True, pady=40)

        # --- –ó–∞–≥–æ–ª–æ–≤–æ–∫ ---
        header_frame = tk.Frame(main_container, bg=self.theme['bg'])
        header_frame.pack(pady=(0, 10))

        logo_label = tk.Label(
            header_frame,
            text="üéµ",
            font=('Segoe UI', 48),
            bg=self.theme['bg']
        )
        logo_label.pack(pady=(0, 5))

        title_label = tk.Label(
            header_frame,
            text="DiskTider",
            font=('Segoe UI', 42, 'bold'),
            bg=self.theme['bg'],
            fg=self.theme['primary']
        )
        title_label.pack()

        subtitle_label = tk.Label(
            header_frame,
            text="–£–º–Ω—ã–π –ø–æ–∏—Å–∫ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ —Ñ–∞–π–ª–æ–≤",
            font=('Segoe UI', 13),
            bg=self.theme['bg'],
            fg=self.theme['text_secondary']
        )
        subtitle_label.pack(pady=(5, 0))

        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        separator = tk.Frame(
            main_container,
            height=2,
            bg=self.theme['border']
        )
        separator.pack(fill='x', pady=20, padx=50)

        # --- –ö–∞—Ä—Ç–æ—á–∫–∏ ---
        features_frame = tk.Frame(main_container, bg=self.theme['bg'])
        features_frame.pack(pady=(0, 25))

        features = [
            {
                'icon': 'üõ°Ô∏è',
                'title': '–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ø—Ä–µ–≤—ã—à–µ –≤—Å–µ–≥–æ',
                'description': '–ü–æ–ª–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º. –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø–µ—Ä–µ–¥ –¥–µ–π—Å—Ç–≤–∏–µ–º.'
            },
            {
                'icon': '‚ú®',
                'title': '–£–º–Ω—ã–π –≤—ã–±–æ—Ä –æ—Ä–∏–≥–∏–Ω–∞–ª–∞',
                'description': '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–∞–π–ª—ã –±–µ–∑ –ø—Ä–∏–ø–∏—Å–æ–∫ (1), (2), "–∫–æ–ø–∏—è".'
            },
            {
                'icon': '‚ö°',
                'title': '–ë—ã—Å—Ç—Ä–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ',
                'description': '–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º: —Å–Ω–∞—á–∞–ª–∞ –ø–æ —Ä–∞–∑–º–µ—Ä—É, –ø–æ—Ç–æ–º –ø–æ —Ö–µ—à—É.'
            }
        ]

        for feature in features:
            card = FeatureCard(
                features_frame,
                icon=feature['icon'],
                title=feature['title'],
                description=feature['description'],
                theme=self.theme
            )
            card.pack(fill='x', pady=5)

        # --- –ù–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å ---
        bottom_frame = tk.Frame(main_container, bg=self.theme['bg'])
        bottom_frame.pack(pady=(15, 0))

        checkbox_frame = tk.Frame(bottom_frame, bg=self.theme['bg'])
        checkbox_frame.pack(pady=(0, 15))

        self.dont_show_again_var = tk.BooleanVar()
        checkbox = tk.Checkbutton(
            checkbox_frame,
            text="–ë–æ–ª—å—à–µ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —ç—Ç–æ –æ–∫–Ω–æ",
            variable=self.dont_show_again_var,
            font=('Segoe UI', 10),
            bg=self.theme['bg'],
            fg=self.theme['text_secondary'],
            selectcolor=self.theme['surface'],
            activebackground=self.theme['bg'],
            borderwidth=0,
            highlightthickness=0,
            cursor='hand2'
        )
        checkbox.pack()

        button_frame = tk.Frame(bottom_frame, bg=self.theme['bg'])
        button_frame.pack()

        self.start_button = AnimatedButton(
            button_frame,
            text="–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É  ‚Üí",
            bg=self.theme['success'],
            fg='#FFFFFF',
            command=self.open_main_app,
            padx=40,
            pady=15
        )
        self.start_button.pack()

        hint_label = tk.Label(
            bottom_frame,
            text="–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞",
            font=('Segoe UI', 9, 'italic'),
            bg=self.theme['bg'],
            fg=self.theme['text_secondary']
        )
        hint_label.pack(pady=(10, 0))

        self.master.bind('<Return>', lambda e: self.open_main_app())

        # –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫–æ–ª–µ—Å–∏–∫–æ–º
        def _on_mousewheel(event):
            self.canvas.yview_scroll(int(-1 * (event.delta / 120)), "units")

        self.canvas.bind_all("<MouseWheel>", _on_mousewheel)

    def _on_canvas_configure(self, event):
        """–¶–µ–Ω—Ç—Ä–∏—Ä—É–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ canvas"""
        # –ü–æ–ª—É—á–∞–µ–º —à–∏—Ä–∏–Ω—É canvas
        canvas_width = event.width
        # –û–±–Ω–æ–≤–ª—è–µ–º —à–∏—Ä–∏–Ω—É –æ–∫–Ω–∞, —á—Ç–æ–±—ã –æ–Ω–æ –∑–∞–Ω–∏–º–∞–ª–æ –≤—Å—é —à–∏—Ä–∏–Ω—É canvas
        self.canvas.itemconfig(self.canvas_window, width=canvas_width)

    def _fade_in(self):
        """–ü–ª–∞–≤–Ω–æ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ –æ–∫–Ω–∞"""
        if self.alpha < 1.0:
            self.alpha += 0.05
            try:
                self.master.attributes('-alpha', self.alpha)
            except:
                pass
            self.after(20, self._fade_in)

    def open_main_app(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
        if self.dont_show_again_var.get():
            # TODO: –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –∫–æ–Ω—Ñ–∏–≥
            pass

        self._fade_out()

    def _fade_out(self):
        """–ü–ª–∞–≤–Ω–æ–µ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º"""
        if self.alpha > 0:
            self.alpha -= 0.1
            try:
                self.master.attributes('-alpha', self.alpha)
            except:
                pass
            self.after(20, self._fade_out)
        else:
            self._switch_to_main()

    def _switch_to_main(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""

        # –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–∏–≤—è–∑–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
        self.master.unbind('<Configure>')

        # –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–∏–≤—è–∑–∫—É –∫–æ–ª–µ—Å–∏–∫–∞ –º—ã—à–∏
        self.canvas.unbind_all("<MouseWheel>")

        self.destroy()

        width, height = 1000, 700
        self.master.title("DiskTider - –ü–æ–∏—Å–∫ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤")
        self._center_window(width, height)
        self.master.minsize(800, 600)

        try:
            self.master.attributes('-alpha', 1.0)
        except:
            pass

        DiskTiderGUI(self.master)

    def _center_window(self, width, height):
        """–¶–µ–Ω—Ç—Ä–∏—Ä—É–µ—Ç –æ–∫–Ω–æ –Ω–∞ —ç–∫—Ä–∞–Ω–µ"""
        self.master.geometry(f"{width}x{height}")
        self.master.update_idletasks()
        x = (self.master.winfo_screenwidth() // 2) - (width // 2)
        y = (self.master.winfo_screenheight() // 2) - (height // 2)
        self.master.geometry(f'+{x}+{y}')


def main():
    root = tk.Tk()
    root.title("DiskTider - –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å")
    root.resizable(True, True)
    root.minsize(600, 500)

    try:
        root.attributes('-alpha', 0.0)
    except:
        pass

    app = IntroScreen(root)
    app._center_window(700, 600)

    root.mainloop()


if __name__ == '__main__':
    main()