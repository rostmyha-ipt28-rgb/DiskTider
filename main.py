# main.py
import os
from core import find_duplicates
from utils import (
    format_size,
    get_file_priority,
    # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ delete_duplicates –∏ count_duplicates_by_extension —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    # delete_duplicates,
    # count_duplicates_by_extension,
)
from logger import get_logger


def show_duplicates(duplicates):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç –∏—Ö –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É"""
    logger = get_logger()

    if not duplicates:
        print("‚ú® –î—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
        logger.info("–î—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return 0

    total_waste = 0
    duplicate_count = 0

    print(f"üî¥ –ù–∞–π–¥–µ–Ω–æ –≥—Ä—É–ø–ø –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {len(duplicates)}\n")
    print("=" * 80)

    for i, (file_hash, files) in enumerate(duplicates.items(), 1):
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É (–ª—É—á—à–∏–µ –ø–µ—Ä–≤—ã–º–∏)
        files_sorted = sorted(files, key=lambda x: get_file_priority(x['name']))

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤ —Å–ª–æ–≤–∞—Ä–µ, —á—Ç–æ–±—ã delete_duplicates –∑–Ω–∞–ª, —á—Ç–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å
        duplicates[file_hash] = files_sorted

        # –õ–æ–≥–∏—Ä—É–µ–º –≥—Ä—É–ø–ø—É
        # logger.log_duplicate_group(i, files_sorted)

        print(f"\nüìÅ –ì—Ä—É–ø–ø–∞ {i} ({len(files_sorted)} –∫–æ–ø–∏–π)")
        print(f"–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {format_size(files_sorted[0]['size'])}")
        print(f"–ó–∞–Ω–∏–º–∞–µ—Ç –ª–∏—à–Ω–µ–≥–æ: {format_size(files_sorted[0]['size'] * (len(files_sorted) - 1))}")
        print()

        for j, file_info in enumerate(files_sorted, 1):
            marker = "üü¢ [–°–û–•–†–ê–ù–ò–¢–¨]" if j == 1 else "üî¥ [–£–î–ê–õ–ò–¢–¨]"
            print(f"  {marker} {file_info['path']}")

        total_waste += files_sorted[0]['size'] * (len(files_sorted) - 1)
        duplicate_count += len(files_sorted) - 1

        print("-" * 80)

    print(f"\nüìä –ò–¢–û–ì–û:")
    print(f"   –î—É–±–ª–∏–∫–∞—Ç–æ–≤: {duplicate_count} —Ñ–∞–π–ª–æ–≤")
    print(f"   –ú–æ–∂–Ω–æ –æ—Å–≤–æ–±–æ–¥–∏—Ç—å: {format_size(total_waste)}")

    # –õ–æ–≥–∏—Ä—É–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    total_files = sum(len(files) for files in duplicates.values())
    # logger.log_scan_results(total_files, duplicate_count, len(duplicates))

    return duplicate_count


def main():
    logger = get_logger()

    print("=" * 80)
    print("üéµ –ü–û–ò–°–ö –î–£–ë–õ–ò–ö–ê–¢–û–í –§–ê–ô–õ–û–í")
    print("=" * 80)
    print()

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ
    directory = input("üìÇ –í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: ").strip()

    if not os.path.isdir(directory):
        print("‚ùå –û—à–∏–±–∫–∞: —É–∫–∞–∑–∞–Ω–Ω–∞—è –ø–∞–ø–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
        logger.error(f"–£–∫–∞–∑–∞–Ω–Ω–∞—è –ø–∞–ø–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {directory}")
        return

    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
    print("\nüéØ –ò—Å–∫–∞—Ç—å —Ç–æ–ª—å–∫–æ –º—É–∑—ã–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã? (y/n): ", end='')
    filter_music = input().strip().lower() == 'y'

    extensions = ['.mp3', '.flac', '.wav', '.m4a', '.aac', '.ogg', '.wma'] if filter_music else None

    # –ò—â–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    # NOTE: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–∏–∑ core.py)
    duplicates = find_duplicates(directory, extensions)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    duplicate_count = show_duplicates(duplicates)

    if duplicate_count == 0:
        logger.log_scan_complete()
        print(f"\nüìÑ –õ–æ–≥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {logger.get_log_file_path()}")
        return

    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–± —É–¥–∞–ª–µ–Ω–∏–∏
    print("\n" + "=" * 80)
    print("üóëÔ∏è  –†–ï–ñ–ò–ú –£–î–ê–õ–ï–ù–ò–Ø")
    print("=" * 80)

    # –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –æ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ–º —É–¥–∞–ª–µ–Ω–∏–∏
    print("‚ùå send2trash –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è. –£–¥–∞–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –ù–ï–û–ë–†–ê–¢–ò–ú–´–ú! –ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã.")

    print("\n1Ô∏è‚É£  –£–¥–∞–ª–∏—Ç—å –í–°–ï –¥—É–±–ª–∏–∫–∞—Ç—ã")
    print("2Ô∏è‚É£  –£–¥–∞–ª–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã —Ç–æ–ª—å–∫–æ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞")
    print("3Ô∏è‚É£  –û—Ç–º–µ–Ω–∞\n")

    choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é (1/2/3): ").strip()

    target_extension = None

    if choice == '2':
        # –õ–æ–≥–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ —Ñ–æ—Ä–º–∞—Ç—É
        print("\nüìù –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:")
        print("   .mp3  .flac  .wav  .m4a  .aac  .ogg  .wma")
        print("   –ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π —Ñ–æ—Ä–º–∞—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: .jpg)\n")
        target_extension = input("–í–≤–µ–¥–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: .mp3): ").strip()

        if not target_extension.startswith('.'):
            target_extension = '.' + target_extension

        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º, —Å–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ
        # dup_count, dup_space = count_duplicates_by_extension(duplicates, target_extension)

        # if dup_count == 0:
        #     print(f"\n‚ùå –î—É–±–ª–∏–∫–∞—Ç–æ–≤ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º {target_extension} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
        #     logger.warning(f"–î—É–±–ª–∏–∫–∞—Ç–æ–≤ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º {target_extension} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        #     logger.log_scan_complete()
        #     print(f"\nüìÑ –õ–æ–≥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {logger.get_log_file_path()}")
        #     return

        # print(f"\nüìä –ù–∞–π–¥–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ —Ñ–æ—Ä–º–∞—Ç–∞ {target_extension}: {dup_count} —Ñ–∞–π–ª–æ–≤")
        # print(f"üíæ –ë—É–¥–µ—Ç –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ: {format_size(dup_space)}")

        confirmation = input(f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ {target_extension}? (–¥–∞/–Ω–µ—Ç): ").strip().lower()

        if confirmation in ('–¥–∞', 'yes'):
            print(f"\nüîÑ –£–¥–∞–ª—è—é –¥—É–±–ª–∏–∫–∞—Ç—ã —Ñ–æ—Ä–º–∞—Ç–∞ {target_extension}...\n")
            # delete_duplicates(duplicates, keep_first=True, target_extension=target_extension)
            print("\n‚ú® –ì–æ—Ç–æ–≤–æ!")
        else:
            print("\n‚úã –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
            logger.info("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")

    elif choice == '1':
        # –õ–æ–≥–∏–∫–∞ –ø–æ–ª–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
        confirmation = input("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ –í–°–ï–• –¥—É–±–ª–∏–∫–∞—Ç–æ–≤? (–¥–∞/–Ω–µ—Ç): ").strip().lower()

        if confirmation in ('–¥–∞', 'yes'):
            print("\nüîÑ –£–¥–∞–ª—è—é –≤—Å–µ –¥—É–±–ª–∏–∫–∞—Ç—ã...\n")
            # delete_duplicates(duplicates, keep_first=True)
            print("\n‚ú® –ì–æ—Ç–æ–≤–æ!")
        else:
            print("\n‚úã –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
            logger.info("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")

    else:
        print("\n‚úã –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        logger.info("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")

    # –ó–∞–≤–µ—Ä—à–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    logger.log_scan_complete()
    print(f"\nüìÑ –õ–æ–≥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {logger.get_log_file_path()}")


if __name__ == "__main__":
    main()