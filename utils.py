# utils.py
import os
import re
from logger import get_logger

# >>> –í–û–ó–í–†–ê–©–ê–ï–ú send2trash
try:
    from send2trash import send2trash

    TRASH_AVAILABLE = True
except ImportError:
    TRASH_AVAILABLE = False
    print("‚ö†Ô∏è send2trash –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: pip install send2trash")


# <<< –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–Ø


def format_size(size_bytes):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
    if size_bytes < 0:
        return "0 –ë"

    for unit in ['–ë', '–ö–ë', '–ú–ë', '–ì–ë', '–¢–ë']:
        if size_bytes < 1024.0:
            return f"{size_bytes:.2f} {unit}"
        size_bytes /= 1024.0
    return f"{size_bytes:.2f} –¢–ë"


def get_file_priority(filename):
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–∏—Å–ª–æ: —á–µ–º –º–µ–Ω—å—à–µ, —Ç–µ–º –≤—ã—à–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç.
    """
    filename_lower = filename.lower()

    bad_patterns = [
        r'\(\d+\)',  # (1), (2), (3)
        r'\s+\d+$',  # –ø—Ä–æ–±–µ–ª –∏ —Ü–∏—Ñ—Ä–∞ –≤ –∫–æ–Ω—Ü–µ
        r'copy',
        r'–∫–æ–ø–∏—è',
        r'\s-\scopy',
        r'\s-\s–∫–æ–ø–∏—è',
    ]

    penalty = 0
    for pattern in bad_patterns:
        if re.search(pattern, filename_lower):
            penalty += 10

    penalty += len(filename) * 0.01

    return penalty


def _normalize_path_long(filepath):
    """
    –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –ø—É—Ç—å, –¥–æ–±–∞–≤–ª—è—è –ø—Ä–µ—Ñ–∏–∫—Å \\\\?\\ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–ª–∏–Ω–Ω—ã—Ö –ø—É—Ç–µ–π (MAX_PATH)
    –≤ os.remove, –Ω–æ –Ω–µ –¥–ª—è send2trash.
    """
    if os.name == 'nt':
        filepath = os.path.normpath(filepath) # –°–Ω–∞—á–∞–ª–∞ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏
        if not filepath.startswith('\\\\?\\'):
            if filepath.startswith('\\\\'):
                # UNC –ø—É—Ç—å (\\server\share)
                return '\\\\?\\UNC\\' + filepath[2:]
            return '\\\\?\\' + filepath
    return filepath

def delete_files_by_list(files_to_delete, mode='trash', dry_run=False):
    """
    –£–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª—ã –∏–∑ —Å–ø–∏—Å–∫–∞.

    Args:
        files_to_delete: —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –∫–ª—é—á–∞–º–∏ 'path', 'name', 'size'
        mode: 'trash' (–≤ –∫–æ—Ä–∑–∏–Ω—É) –∏–ª–∏ 'delete' (–Ω–∞–≤—Å–µ–≥–¥–∞)
        dry_run: –µ—Å–ª–∏ True, —Ç–æ–ª—å–∫–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —á—Ç–æ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è

    Returns:
        tuple: (deleted_count, freed_space_str, errors_list)
    """
    logger = get_logger()

    if dry_run:
        logger.info("üîç –†–ï–ñ–ò–ú –ü–†–ï–î–ü–†–û–°–ú–û–¢–†–ê (DRY RUN) - —Ñ–∞–π–ª—ã –Ω–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã")
        mode = 'preview'

    logger.log_deletion_start(mode)

    deleted_count = 0
    freed_space = 0
    errors = []

    for file_info in files_to_delete:
        original_filepath = file_info['path']

        # >>> –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—É—Ç—å –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π.
        # –≠—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ –¥–∞–∂–µ –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞ MAX_PATH.
        normalized_for_trash = os.path.normpath(original_filepath)
        # <<<

        if dry_run:
            # –ü—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º, —á—Ç–æ —Ñ–∞–π–ª –±—É–¥–µ—Ç —É–¥–∞–ª—ë–Ω
            logger.info(f"[–ü–†–ï–î–ü–†–û–°–ú–û–¢–†] –ë—É–¥–µ—Ç —É–¥–∞–ª—ë–Ω: {original_filepath}")
            deleted_count += 1
            freed_space += file_info['size']
            continue

        try:
            if mode == 'trash' and TRASH_AVAILABLE:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º send2trash —Å –ø—É—Ç–µ–º, –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º —Ç–æ–ª—å–∫–æ –ø–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º
                send2trash(normalized_for_trash)
                logger.info(f"–ü–µ—Ä–µ–º–µ—â—ë–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É: {original_filepath}")
            else:
                # –ù–µ–æ–±—Ä–∞—Ç–∏–º–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ (os.remove —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–µ—Ñ–∏–∫—Å –¥–ª—è MAX_PATH)
                normalized_filepath_max_path = _normalize_path_long(original_filepath)
                os.remove(normalized_filepath_max_path)
                logger.info(f"–£–¥–∞–ª—ë–Ω –Ω–∞–≤—Å–µ–≥–¥–∞: {original_filepath}")

            deleted_count += 1
            freed_space += file_info['size']

        except FileNotFoundError:
            error_msg = f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {original_filepath}"
            logger.log_deletion_error(original_filepath, error_msg)
            errors.append(error_msg)
        except PermissionError as e:
            error_msg = f"–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ: {str(e)}"
            logger.log_deletion_error(original_filepath, error_msg)
            errors.append(error_msg)
        except Exception as e:
            # –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ –≤ —Ç–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –≤ –∫–∞–∫–æ–º –æ–Ω–∞ –ø—Ä–∏—à–ª–∞
            error_msg = f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {type(e).__name__}: {str(e)}"
            logger.log_deletion_error(original_filepath, error_msg)
            errors.append(error_msg)

    freed_space_str = format_size(freed_space)

    if dry_run:
        logger.info(f"[–ü–†–ï–î–ü–†–û–°–ú–û–¢–†] –ë—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ: {deleted_count} —Ñ–∞–π–ª–æ–≤")
        logger.info(f"[–ü–†–ï–î–ü–†–û–°–ú–û–¢–†] –ë—É–¥–µ—Ç –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ: {freed_space_str}")
    else:
        logger.log_deletion_results(deleted_count, freed_space_str)

    return deleted_count, freed_space_str, errors